@startuml

frame Commands {
    interface Command<TResult> {
      + TResult execute()
    }

    class AddEventCommand implements Command {
      + AddEventCommand(Habit, Event)
      + CompletableFuture<Event> execute()
    }

    class UpdateEventCommand implements Command {
      + UpdateEventCommand(Event)
      + CompletableFuture<Event> execute()
    }

    class DeleteEventCommand implements Command {
      + DeleteEventCommand(Event)
      + CompletableFuture<Boolean> execute()
    }

    class AddHabitCommand implements Command {
      + AddHabitCommand(User, Habit)
      + CompletableFuture<Habit> execute()
    }

    class UpdateHabitCommand implements Command {
      + UpdateHabitCommand(Habit)
      + CompletableFuture<Habit> execute()
    }

    class DeleteHabitCommand implements Command {
      + DeleteHabitCommand(Habit)
      + CompletableFuture<Boolean> execute()
    }
}

frame Controllers {
    class EventController {
      + EventController getInstance()

      + CompletableFuture<Boolean> delete(String)
      + CompletableFuture<String> update(String, Event)
      + CompletableFuture<String> add(Event)
    }

    class HabitController {
      + HabitController getInstance()

      + CompletableFuture<Boolean> delete(String)
      + CompletableFuture<String> update(String, Habit)
      + CompletableFuture<String> add(Habit)

      + CompletableFuture<String> addEvent(String, String)
      + CompletableFuture<String> deleteEvent(String, String)
    }

    note right of HabitController::addEvent
        Pushes a remote Event ID to
        the collection of Event IDs held
        by a Habit
    end note

    note left of HabitController::deleteEvent
        Deletes a remote Event ID from
        the collection of Event IDs held
        by a Habit
    end note

    class UserController {
      + UserController getInstance()

      + CompletableFuture<String> addHabit(String, String)
      + CompletableFuture<String> deleteHabit(String, String)
    }
}

note bottom of Controllers
    The Controller classes, unlike
    Commands, operate on String IDs
    exclusively. It is the duty of the
    Commands to translate semantic
    objects to-and-from their IDs.
end note

note bottom of Commands
    The Commands also use the
    Repositories to correlate returned
    String IDs with their data objects,
    but these relationships are
    omitted for brevity.
end note

UpdateEventCommand o-- EventController
AddEventCommand o-- EventController
AddEventCommand o-- HabitController
DeleteEventCommand o-- EventController
DeleteEventCommand o-- HabitController

DeleteHabitCommand o-- EventController
DeleteHabitCommand o-- HabitController
DeleteHabitCommand o-- UserController
UpdateHabitCommand o-- HabitController
AddHabitCommand o-- UserController
AddHabitCommand o-- HabitController

@enduml